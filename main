from cmu_112_graphics import *


from DrumStickHandler import *

import time, threading


def appStarted(app):

    app.drumStick1 = DrumStick()
    app.frame = None

    app.redStick = ()

    

    app.camInputThread = camThread(app)
    app.camInputThread.start()


def timerFired(app):

    pass

def keyPressed(app, event):

    pass



def drawStick(app, canvas):
    rad = 10

    try:
        canvas.create_oval(app.redStick[0]-rad, app.redStick[1]-rad, app.redStick[0]+rad, app.redStick[1]+rad, fill='red', width = 3)
    except:
        pass

#BUG FALSE MVC VIOLATION
#TODO INCREASE DRAW SPEED
def redrawAll(app, canvas):
    drawStick(app, canvas)

    pass


def appStopped(app):
    app.camInputThread.stop()

#from https://www.tutorialspoint.com/python/python_multithreading.htm#:~:text=Python%20-%20Multithreaded%20Programming%201%20Starting%20a%20New,Synchronizing%20Threads.%20...%205%20Multithreaded%20Priority%20Queue.%20
class camThread(threading.Thread):
    
    def __init__(self, app):
      threading.Thread.__init__(self)
      self.running = True
      self.app = app


    def run(self):
        #print ("Starting " + self.name)
        print('running')
        time.sleep(1)

        while self.running:
            self.app.drumStick1.run()
            self.app.frame = self.app.drumStick1.getFrame()
            self.app.redStick = self.app.drumStick1.getRedStickTip()
            print(self.app.redStick)

            try:
                cv2.imshow('f', self.app.drumStick1.getFrame())
            except:
                pass

            if cv2.waitKey(1) == ord('q'):
                break
          
        cv2.destroyAllWindows
        self.app.drumStick1.capture.release()

    def stop(self):
        self.running = False
        self.app.drumStick1.capture.release()
        cv2.destroyAllWindows




def main():
    runApp(width = 1920, height = 1200)

if __name__ == "__main__":
    main()

